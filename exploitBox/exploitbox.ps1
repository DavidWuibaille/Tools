# Vérification des droits administrateur
function Test-IsAdmin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Redémarrage automatique en admin si nécessaire
if (-not (Test-IsAdmin)) {
    Write-Warning "Script is not running as Administrator. Restarting with elevated rights..."
    Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    exit
} 



# Charger le fichier JSON (config.json) depuis le dossier courant
$configPath = Join-Path -Path $PSScriptRoot -ChildPath "config.json"
if (Test-Path $configPath) {
    $config = Get-Content -Path $configPath | ConvertFrom-Json
} else {
    Write-Host "Le fichier config.json est introuvable à l'emplacement spécifié : $configPath"
    exit
}
if (Test-Path $configPath) {
    $config = Get-Content -Path $configPath | ConvertFrom-Json
} else {
    Write-Host "Le fichier config.json est introuvable à l'emplacement spécifié : $configPath"
    exit
}

# Ajouter les types nécessaires pour créer l'interface graphique Windows Forms
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Création du formulaire
$form = New-Object System.Windows.Forms.Form
$form.Text = 'Exploit Task'
$form.Size = New-Object System.Drawing.Size(900, 830)
$form.StartPosition = 'CenterScreen'
$form.FormBorderStyle = 'FixedDialog'
$form.MaximizeBox = $false
$form.MinimizeBox = $false
$form.BackColor = [System.Drawing.Color]::WhiteSmoke  # Fond clair et pro

# Label pour la sélection d'option
$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Point(20, 20)
$label.Size = New-Object System.Drawing.Size(280, 25)
$label.Font = New-Object System.Drawing.Font("Arial", 10, [System.Drawing.FontStyle]::Bold)
$label.Text = 'Choisissez une option :'
$form.Controls.Add($label)

# ComboBox pour la sélection
$comboBox = New-Object System.Windows.Forms.ComboBox
$comboBox.Location = New-Object System.Drawing.Point(20, 50)
$comboBox.Size = New-Object System.Drawing.Size(260, 25) # Augmentation de la hauteur
$comboBox.Font = New-Object System.Drawing.Font("Arial", 10)
$comboBox.Items.Add('IVANTI Core')
$comboBox.Items.Add('IVANTI Console')
$comboBox.Items.Add('WSUS')
$form.Controls.Add($comboBox)

# Bouton pour exécuter l'action (Correctement aligné)
$button = New-Object System.Windows.Forms.Button
$button.Location = New-Object System.Drawing.Point(300, 47) # Alignement parfait avec la ComboBox
$button.Size = New-Object System.Drawing.Size(120, 30) # Taille plus grande pour une meilleure lisibilité
$button.Text = 'Exploit'
$button.Font = New-Object System.Drawing.Font("Arial", 10, [System.Drawing.FontStyle]::Bold)
$button.BackColor = [System.Drawing.Color]::SteelBlue
$button.ForeColor = [System.Drawing.Color]::White
$button.FlatStyle = 'Flat'
$form.Controls.Add($button)

# Effet de survol sur le bouton
$button.Add_MouseEnter({ $button.BackColor = [System.Drawing.Color]::RoyalBlue })
$button.Add_MouseLeave({ $button.BackColor = [System.Drawing.Color]::SteelBlue })

# Label pour le nom
$labelNom = New-Object System.Windows.Forms.Label
$labelNom.Location = New-Object System.Drawing.Point(20, 90)
$labelNom.Size = New-Object System.Drawing.Size(100, 25)
$labelNom.Font = New-Object System.Drawing.Font("Arial", 10)
$labelNom.Text = 'Nom :'
$form.Controls.Add($labelNom)

# TextBox pour le nom d'utilisateur
$textBoxNom = New-Object System.Windows.Forms.TextBox
$textBoxNom.Location = New-Object System.Drawing.Point(140, 90)
$textBoxNom.Size = New-Object System.Drawing.Size(200, 25)
$textBoxNom.Font = New-Object System.Drawing.Font("Arial", 10)
$form.Controls.Add($textBoxNom)
$textBoxNom.Enabled = $false

# Label pour le mot de passe
$labelPassword = New-Object System.Windows.Forms.Label
$labelPassword.Location = New-Object System.Drawing.Point(20, 130)
$labelPassword.Size = New-Object System.Drawing.Size(100, 25)
$labelPassword.Font = New-Object System.Drawing.Font("Arial", 10)
$labelPassword.Text = 'Mot de passe :'
$form.Controls.Add($labelPassword)

# TextBox pour le mot de passe
$textBoxPassword = New-Object System.Windows.Forms.TextBox
$textBoxPassword.Location = New-Object System.Drawing.Point(140, 130)
$textBoxPassword.Size = New-Object System.Drawing.Size(200, 25)
$textBoxPassword.Font = New-Object System.Drawing.Font("Arial", 10)
$textBoxPassword.UseSystemPasswordChar = $true
$form.Controls.Add($textBoxPassword)
$textBoxPassword.Enabled = $false

# Zone de texte pour les résultats
$resultBox = New-Object System.Windows.Forms.TextBox
$resultBox.Location = New-Object System.Drawing.Point(20, 180)
$resultBox.Size = New-Object System.Drawing.Size(860, 550)
$resultBox.MultiLine = $true
$resultBox.ScrollBars = 'Vertical'
$resultBox.Font = New-Object System.Drawing.Font("Consolas", 10)
$resultBox.BackColor = [System.Drawing.Color]::White
$resultBox.BorderStyle = 'FixedSingle'
$form.Controls.Add($resultBox)

# Barre de progression
$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Location = New-Object System.Drawing.Point(20, 750)
$progressBar.Size = New-Object System.Drawing.Size(860, 20)
$progressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Continuous
$form.Controls.Add($progressBar)



# Gestionnaire d'événements pour le changement de sélection dans la ComboBox
$comboBox.Add_SelectedIndexChanged({
    if ($comboBox.SelectedItem -eq 'IVANTI Core') {
        $textBoxNom.Enabled = $true
        $textBoxPassword.Enabled = $true


		$textBoxNom.Text = $config.SQL.UsernameW
		$textBoxPassword.Text = $config.SQL.PasswordW


    } else {
        $textBoxNom.Enabled = $false
        $textBoxPassword.Enabled = $false
    }
})


function Write-Log {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$True)]
        [string]$Message,
        
        [Parameter(Mandatory=$False)]
        [string]$Path = $(if ($MyInvocation.MyCommand.Path) { 
            $MyInvocation.MyCommand.Path -replace '\.ps1$', '.log' 
        } else { 
            "c:\windows\temp\exploitbox.log" 
        })
    )
    

    
    # Ajouter le message dans le fichier de log avec un horodatage
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp : $selectedOption : $Message" | Out-File -FilePath $Path -Append
}



function Start-WSUS-Maintenance {
    $AffichageRetour = ""
    $FileSQL = $PSScriptRoot + "\WSUSMaintenance.sql"
    
    Write-Log -Message "----- Start-WSUS-Maintenance"
    import-module SqlServer

    $Instance  = "\\.\pipe\MICROSOFT##WID\tsql\query"
    $Bdd       = "SUSDB"

    try {
	    Invoke-Sqlcmd -ServerInstance $Instance -Database $Bdd -InputFile $FileSQL -ErrorAction 'Stop' -Verbose
        $AffichageRetour   = "Maintenance ok"
        Write-Log -Message "Maintenance ok"
    } catch {
	    $AffichageRetour = "KO : $error"
        Write-Log -Message "KO : $error"
    }
    $AffichageRetour =   $AffichageRetour + "`r`n"
    return $AffichageRetour
}


function Start-IVANTI-Maintenance {
    $AffichageRetour = ""
    $FileSQL = $PSScriptRoot + "\SQLMaintenance2022.sql"
    Write-Log -Message "----- Start-IVANTI-Maintenance"
    $username = $textBoxNom.Text
    $password = $textBoxPassword.Text # | ConvertTo-SecureString -AsPlainText -Force
    
    # Création de l'objet PSCredential
    #$creds = New-Object System.Management.Automation.PSCredential ($Username, $Password)
    
    Write-Host $username

    
    import-module SqlServer

    $Instance = $config.SQL.Server
    $Bdd = $config.SQL.Database
 
	write-host "$Instance"
	write-host "$Bdd"
	write-host "$username"
	write-host "$password"
	write-host "$FileSQL"
	

$Instance = "$($config.SQL.Server),1433"

	
    try {

Invoke-Sqlcmd -ServerInstance $Instance -Database $Bdd -Username $username -Password $password -TrustServerCertificate -InputFile $FileSQL -ErrorAction 'Stop' -Verbose
        $AffichageRetour = "Maintenance ok"
    } catch {
	    $AffichageRetour = "KO : $error"
    }
    $AffichageRetour =   $AffichageRetour + "`r`n"
    return $AffichageRetour
}



function Get-RebootStatus {
    $AffichageRetour = ""

    Write-Log -Message "----- Get-RebootStatus"
    # Vérifie si un redémarrage est nécessaire
    $rebootRequired = $false
    $rebootPaths = @(
        'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending',
        'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired'
    )

    foreach ($path in $rebootPaths) {
        if (Test-Path $path) {
            $rebootRequired = $true
            break
        }
    }

    $lastBootTime = (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
    if ($rebootRequired) {
       $AffichageRetour = "Reboot Needed"
       Write-Log -Message "Reboot Needed"
    } else {
       $AffichageRetour = "No Reboot Needed"
       Write-Log -Message "No Reboot Needed"
    }
    $AffichageRetour =   $AffichageRetour + "`r`n"
    return $AffichageRetour
}

function Cleanup-IIS {
    $AffichageRetour = ""

    Write-Log -Message "----- Cleanup-IIS"
    $LogPath = "C:\inetpub\logs\LogFiles\W3SVC1"
    $maxDaystoKeep = -30
    $itemsToDelete = dir $LogPath -File *.log | Where LastWriteTime -lt ((get-date).AddDays($maxDaystoKeep))
    $itemsToDelete.VersionInfo.FileName
    if ($itemsToDelete.Count -gt 0){
        ForEach ($item in $itemsToDelete){
            Get-item $item.VersionInfo.FileName | Remove-Item -Verbose
        }
    }

    $itemsToDelete = dir $LogPath -File *.log | Where LastWriteTime -lt ((get-date).AddDays($maxDaystoKeep))
    #$itemsToDelete.VersionInfo.FileName
    if ($itemsToDelete.Count -gt 0){
        $AffichageRetour = "PurgeIIS : KO"
        Write-Log -Message "PurgeIIS : KO"
    } Else {
        $AffichageRetour = "PurgeIIS : OK" 
        Write-Log -Message "PurgeIIS : OK" 
    }
    $AffichageRetour =   $AffichageRetour + "`r`n"
    return $AffichageRetour
}

function Check-ldscan {
    $AffichageRetour = ""

    Write-Log -Message "----- Check-ldscan"
    $count = Get-ChildItem "C:\Program Files\LANDesk\ManagementSuite\ldscan" -File | Measure-Object | %{$_.Count}
    If ($count -gt 200) {
        W$AffichageRetour = "Countldscan : KO"
        Write-Log -Message "Countldscan : KO"
    } Else {
        $count = Get-ChildItem "C:\Program Files\LANDesk\ManagementSuite\ldscan" -Recurse -File | Measure-Object | %{$_.Count}
        write-host "Global = $count"
        If ($count -gt 200) {
            $AffichageRetour = "Countldscan : WARNING" 
            Write-Log -Message "Countldscan : WARNING" 
        } Else {
            $AffichageRetour = "Countldscan : OK"
            Write-Log -Message "Countldscan : OK"
        }
    }
    $AffichageRetour =   $AffichageRetour + "`r`n"
    return $AffichageRetour
}




# Fonction pour vérifier si le script est exécuté en tant qu'administrateur
function Test-IsAdmin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}



# Gestionnaire d'événements pour le clic du bouton
$button.Add_Click({
    $selectedOption = $comboBox.SelectedItem

    If ($selectedOption -eq "IVANTI Core") {
        $ResultFinal = ""
        $progressBar.Value = 0
        $progressBar.Maximum = 7
        $progressBar.Step = 1  
        
        $Result4 = Check-ldscan
        $ResultFinal = "----- Check ldscan  " + "`r`n" + $Result4
        $resultBox.Text = $ResultFinal
        $progressBar.PerformStep()

        $Result1 = Cleanup-IIS
        $ResultFinal = $ResultFinal + "`r`n" + "----- Clean IIS Log " + "`r`n" + $Result1
        $resultBox.Text = $ResultFinal
        $progressBar.PerformStep()

        $Result2 = Get-RebootStatus
        $ResultFinal = $ResultFinal + "`r`n" + "----- Get Reboot" + "`r`n" + $Result2
        $resultBox.Text = $ResultFinal
        $progressBar.PerformStep()

        $Result3 = Start-IVANTI-Maintenance
        $ResultFinal = $ResultFinal + "`r`n" + "----- SQL maintenance" + "`r`n" + $Result3
        $resultBox.Text = $ResultFinal
        $progressBar.PerformStep()
    }
	
    If ($selectedOption -eq "IVANTI Console") {
        $ResultFinal = ""
        $progressBar.Value = 0
        $progressBar.Maximum = 2
        $progressBar.Step = 1    


        $Result2 = Get-RebootStatus
        $ResultFinal = $ResultFinal + "`r`n" + "----- Get Reboot" + "`r`n" + $Result2
        $resultBox.Text = $ResultFinal
        $progressBar.PerformStep() 
    }
	
    If ($selectedOption -eq "WSUS") {      
        $ResultFinal = ""
        $progressBar.Value = 0
        $progressBar.Maximum = 4
        $progressBar.Step = 1      

        $Result2 = Get-RebootStatus
        $ResultFinal = $ResultFinal + "`r`n" + "----- Get Reboot" + "`r`n" + $Result2 
        $resultBox.Text = $ResultFinal
        $progressBar.PerformStep()

        $Result3 = Start-WSUS-Maintenance
        $ResultFinal = $ResultFinal + "`r`n" + "----- SQL Maintenance " + "`r`n" + $Result3
        $resultBox.Text = $ResultFinal 
        $progressBar.PerformStep()

    }
})

# Afficher le formulaire
$form.ShowDialog()
